/* GramaticaTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. GramaticaTokenManager.java */
import java.io.*;

/** Token Manager. */
@SuppressWarnings("unused")public class GramaticaTokenManager implements GramaticaConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800000L) != 0L)
            return 59;
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 17;
            return 17;
         }
         if ((active0 & 0x2f40L) != 0L)
         {
            jjmatchedKind = 17;
            return 79;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 17;
            return 21;
         }
         if ((active0 & 0x1000000L) != 0L)
            return 1;
         return -1;
      case 1:
         if ((active0 & 0x840L) != 0L)
            return 79;
         if ((active0 & 0x3780L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 1;
            return 79;
         }
         return -1;
      case 2:
         if ((active0 & 0x1000L) != 0L)
            return 79;
         if ((active0 & 0x2780L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 2;
            return 79;
         }
         return -1;
      case 3:
         if ((active0 & 0x180L) != 0L)
            return 79;
         if ((active0 & 0x2600L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 3;
            return 79;
         }
         return -1;
      case 4:
         if ((active0 & 0x2200L) != 0L)
            return 79;
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 4;
            return 79;
         }
         return -1;
      case 5:
         if ((active0 & 0x400L) != 0L)
            return 79;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 36:
         return jjMoveStringLiteralDfa1_0(0xc000L);
      case 40:
         return jjStopAtPos(0, 29);
      case 41:
         return jjStopAtPos(0, 30);
      case 46:
         return jjStartNfaWithStates_0(0, 23, 59);
      case 58:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 59:
         return jjStopAtPos(0, 28);
      case 61:
         return jjStartNfaWithStates_0(0, 24, 1);
      case 63:
         return jjStopAtPos(0, 26);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 123:
         return jjStopAtPos(0, 31);
      case 125:
         return jjStopAtPos(0, 32);
      case 126:
         return jjStopAtPos(0, 3);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         break;
      case 61:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 102:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 79);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x280L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 111:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 79);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 79);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 79);
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 110:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 79);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 79);
         break;
      case 108:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 79);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 79);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 71:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      case 82:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L);
      case 71:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 77:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(11, 15);
         break;
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 77:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(13, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 79;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                     { jjCheckNAddStates(3, 7); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 22)
                        kind = 22;
                     { jjCheckNAddStates(8, 11); }
                  }
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(59, 60); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(12, 16); }
                  else if (curChar == 38)
                  {
                     if (kind > 4)
                        kind = 4;
                  }
                  else if (curChar == 33)
                     { jjCheckNAdd(1); }
                  else if (curChar == 61)
                     { jjCheckNAdd(1); }
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 62)
                     { jjCheckNAdd(1); }
                  else if (curChar == 60)
                     { jjCheckNAdd(1); }
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                     { jjCheckNAdd(60); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(60); }
                  break;
               case 1:
                  if (curChar == 61 && kind > 1)
                     kind = 1;
                  break;
               case 2:
                  if (curChar == 60)
                     { jjCheckNAdd(1); }
                  break;
               case 3:
                  if (curChar == 62)
                     { jjCheckNAdd(1); }
                  break;
               case 4:
                  if (curChar == 61)
                     { jjCheckNAdd(1); }
                  break;
               case 5:
                  if (curChar == 33)
                     { jjCheckNAdd(1); }
                  break;
               case 12:
                  if (curChar == 38 && kind > 4)
                     kind = 4;
                  break;
               case 13:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 38 && kind > 4)
                     kind = 4;
                  break;
               case 49:
                  if (curChar == 39)
                     { jjCheckNAddStates(12, 16); }
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(51); }
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(12, 16); }
                  break;
               case 52:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(53, 54); }
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(54); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(17, 21); }
                  break;
               case 56:
                  if (curChar == 39 && kind > 18)
                     kind = 18;
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(22, 27); }
                  break;
               case 58:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(59, 60); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjCheckNAdd(60); }
                  break;
               case 68:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 70:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  { jjCheckNAddStates(8, 11); }
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(71, 72); }
                  break;
               case 72:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(73, 74); }
                  break;
               case 73:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(74); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjCheckNAdd(74); }
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(75, 76); }
                  break;
               case 76:
                  if (curChar == 46 && kind > 20)
                     kind = 20;
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAdd(77); }
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 21)
                     kind = 21;
                  { jjCheckNAddStates(3, 7); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 79:
               case 67:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 21:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     { jjCheckNAddStates(0, 2); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 17:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     { jjCheckNAddStates(0, 2); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 124)
                  {
                     if (kind > 2)
                        kind = 2;
                  }
                  if (curChar == 66)
                     { jjAddStates(28, 29); }
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 47;
                  else if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 38;
                  else if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if (curChar == 124 && kind > 2)
                     kind = 2;
                  break;
               case 7:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 124 && kind > 2)
                     kind = 2;
                  break;
               case 9:
                  if (curChar == 114 && kind > 2)
                     kind = 2;
                  break;
               case 10:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 15:
                  if (curChar == 101 && kind > 5)
                     kind = 5;
                  break;
               case 16:
                  if (curChar == 117)
                     { jjCheckNAdd(15); }
                  break;
               case 18:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 115)
                     { jjCheckNAdd(15); }
                  break;
               case 20:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 84 && kind > 16)
                     kind = 16;
                  break;
               case 24:
                  if (curChar == 78)
                     { jjCheckNAdd(23); }
                  break;
               case 25:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 65)
                     { jjCheckNAdd(23); }
                  break;
               case 27:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 69 && kind > 16)
                     kind = 16;
                  break;
               case 31:
                  if (curChar == 76)
                     { jjCheckNAdd(30); }
                  break;
               case 32:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 82 && kind > 16)
                     kind = 16;
                  break;
               case 37:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 71 && kind > 16)
                     kind = 16;
                  break;
               case 41:
               case 46:
                  if (curChar == 78)
                     { jjCheckNAdd(40); }
                  break;
               case 42:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 47:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 55:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjAddStates(12, 16); }
                  break;
               case 61:
                  if (curChar == 66)
                     { jjAddStates(28, 29); }
                  break;
               case 62:
                  if (curChar == 84)
                     { jjCheckNAdd(30); }
                  break;
               case 63:
                  if (curChar == 89)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 76 && kind > 16)
                     kind = 16;
                  break;
               case 65:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 79 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   68, 69, 67, 71, 72, 75, 76, 77, 71, 58, 75, 77, 50, 51, 52, 55, 
   56, 50, 52, 55, 56, 57, 50, 51, 52, 55, 56, 57, 63, 66, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, "\176", null, null, "\151\146", "\164\150\145\156", 
"\145\154\163\145", "\167\150\151\154\145", "\162\145\160\145\141\164", "\144\157", 
"\146\157\162", "\165\156\164\151\154", 
"\44\102\105\107\111\116\137\120\122\117\107\122\101\115", "\44\105\116\104\137\120\122\117\107\122\101\115", null, null, null, null, 
null, null, null, "\56", "\75", "\72\75", "\77", "\72", "\73", "\50", "\51", "\173", 
"\175", null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public GramaticaTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public GramaticaTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 79; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1ffffffffL, 
};
static final long[] jjtoSkip = {
   0xe00000000L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[79];
    private final int[] jjstateSet = new int[2 * 79];

    
    protected char curChar;
}
