PARSER_BEGIN(Conjunto)

public class Conjunto{
	public static void main(String args[]) throws ParseException{
		Conjunto Conj = new Conjunto(System.in);
		Conj.Inicio();
	}
}

PARSER_END(Conjunto)

SKIP: {" " | "\n" | "\t"}


TOKEN: {

	<NUM: (["1"-"9"])>
		{
		System.out.println("Carac: "+image);
		}
	|
	<LETRAS: (<UND>["a"-"z"])>
		{
		System.out.println("Carac: "+image);
		}
	|
	<PALAVRAS: (["a"-"z"])>
		{
		System.out.println("Palavra: "+image);
		}

	|
	<RT: "...">
		{
		System.out.println("Rt: "+image);
		}
	|
	<AC: "{">
		{
		System.out.println("Chave: "+image);
		}
	|
	<FC: "}">
		{
		System.out.println("Chave: "+image);
		}
	|
	<PV: ";">
		{
		System.out.println("PVirgula: "+image);
		}
	|
	<OP: "E" | "U" | "^" | "c">
		{
		System.out.println("Operador: "+image);
		}
	|
	<UND: "_">
		{
		System.out.println("Und: "+image);
		}
	|
	<IGUAL: "=">
		{
		System.out.println("Igual: "+image);
		}
	|
	<VIRG: ",">
		{
		System.out.println("Virgula: "+image);
		}
	|
	<AP: "(">
		{
		System.out.println("Parenteses: "+image);
		}
	|
	<FP: ")">
		{
		System.out.println("Parenteses: "+image);
		}
}


// Regras de Produção

void Inicio():{}
{
	Expressao()	<EOF>
}

void Expressao():{}
{
	LOOKAHEAD(3)
	Declaracao() | Operacao()
}

void Declaracao():{}
{
	(<LETRAS><IGUAL>)(<AC>Sequencia()<FC> | Op_conj()) <PV>
}

void Sequencia():{}
{
	Termo()(<VIRG>Termo())*
}

void Termo():{}
{
	(<NUM>)+(<RT>(<NUM>)+)? | (<PALAVRAS>)+
}

void Operacao():{}
{	
	LOOKAHEAD(3)
	((<NUM>)+(<OP>))* Op_conj()<PV>

	| 

	<AP>((<NUM>)+(<OP>))* Op_conj()<FP><PV>
}

void Op_conj():{}
{
	<LETRAS>(Termo2())* | <AP><LETRAS>(Termo2())<FP>
}

void Termo2():{}
{		
	<OP>((<AP>Termo2()<FP>) | Termo2())| <LETRAS>(Termo2())*
}